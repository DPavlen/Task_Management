version: '3.5'

volumes:
  static:
  backend_static:
  backend_media:
  pg_data:
  es_data:

networks:
  task-network:
    driver: bridge

services:

  db:
    image: postgres:13.0-alpine
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data/
    networks:
      - task-network

  backend:
    build:
      context: ./backend/
      dockerfile: Dockerfile
    volumes:
      - backend_static:/app/static/
      - backend_media:/app/media/
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_started
      rabbitmq:
          condition: service_started
      elasticsearch:
          condition: service_healthy
    env_file:
      - .env
    networks:
      - task-network
#    command: >
#      bash -c "poetry run python manage.py makemigrations &&
#               poetry run python manage.py migrate &&
#               poetry run python manage.py search_index --rebuild &&
#               poetry run python manage.py runserver 0.0.0.0:8000"

  nginx:
    build:
      context: ./infra
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: always
    volumes:
      - ./infra/nginx.conf:/etc/nginx/conf.d/default.conf
      - static:/app/static/
      - backend_static:/backend_static/
      - backend_media:/backend_media/
    networks:
      - task-network

  rabbitmq:
    image: rabbitmq:3.10.7-management
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
    env_file:
      - .env
    networks:
      - task-network

  flower:
#    image: mher/flower:latest
    image: mher/flower:0.9.7
    command: --broker=amqp://rmuser:rmpassword@rabbitmq --broker_api=http://rmuser:rmpassword@rabbitmq:15672/api/
    restart: always
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=amqp://rmuser:rmpassword@rabbitmq:5672/
      - FLOWER_API_URL=http://rabbitmq:15672/api/
    depends_on:
      - rabbitmq
      - backend
    networks:
      - task-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - task-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
      interval: 10s
      retries: 5